//SPDX-License Identifier : GPL-3.0

pragma solidity >=0.5.0 < 0.9.0;

contract Lottery {
   address public  manager;
   address payable[] public participants;


   constructor() {
       manager = msg.sender;
   }

    //The below functions can only be used once.
   receive() external payable {
       require(msg.value == 1 ether, "The minimum amount to particpate is 1 Eth !!");
       participants.push(payable (msg.sender));
   }

   function getBalance() public  view  returns (uint){
       require(msg.sender==manager,"Only the manager can view the Balance !!");
       return address(this).balance;
   }

   function randomSelect() public  view  returns(uint){
      return  uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp,participants.length)));
   }

   function selectWinner() public  {
       require(msg.sender==manager,"Only the manager has the right to run this function !!");
       require(participants.length >=2, "Less participants , the minimum no of participants is 3 !!");

       uint randomVal = randomSelect();
       address payable winner;
       uint index = randomVal % participants.length;
       winner = participants[index];
       //return  winner;
       winner.transfer(getBalance());

       participants =  new address payable [](0);
   }

}
